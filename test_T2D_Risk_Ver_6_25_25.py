import unittest #unittest provides a framework for testing.
from T2D_Risk_Ver_6_25_25 import calculate_risk #In the terminal, the code python3 -m unittest test_T2D_Risk_Ver_6_25_25 must be written in the terminal to run the test.

class TestRisk(unittest.TestCase):

    def test_all_false(self): #This is the first test of the program, to receive a value of 0 from calculate_risk() in the T2D_Risk_Ver_6_25_25 program.
        print("\nTest 1 Results:")
        self.assertEqual(calculate_risk(False, False, False, False, False, False, 0, False, False, False, False, False, False, False,  0), "low") #The purpose of .assertEqual is to check if the value generated by calculate_risk(), with its given values, is equal to the second value.
    def test_all_true(self):
        print("\nTest 2 Results:")
        self.assertEqual(calculate_risk(True, True, True, True, True, True, 35, True, True, True, True, True, True, True, 3), "high")
    def test_me(self):
        print("\nTest 3 Results:")
        self.assertEqual(calculate_risk(False, False, True, False, False, True, 0, False, False, False, False, False, True, True, 1), "somewhat low")

    def test_for_moderate(self):
        print("\nTest 4 Results:")
        self.assertEqual(calculate_risk(False, False, False, False, False, True, 0, True, True, False, True, False, False, True, 0), "moderate")
    def test_for_somewhat_high(self):
        print("\nTest 5 Results:")
        self.assertEqual(calculate_risk(False, True, False, False, True, True, 15, True, False, True, False, False, False, True, 2), "somewhat high")
    def test_average(self):
        print("\nTest 6 Results:")
        self.assertEqual(calculate_risk(True, False, False, False, False, False, 0, False, True, True, False, True, False, True, 1), "high")
    def test_for_low_2(self):
        print("\nTest 7 Results:")
        self.assertEqual(calculate_risk(True, True, True, False, False, False, 0, False, True, False, False, False, False, False, 0), "low")
    def test_only_BMI(self):
        print("\nTest 8 Results:")
        self.assertEqual(calculate_risk(True, False, False, False, False, False, 0, False, True, False, False, False, False, False, 0), "low")
    def test_first_sample(self):
        print("\nFirst sample results")
        self.assertEqual(calculate_risk(True, False, False, False, True, True, 35, True, True, False, True, True, True, True, 3), "high")
    def test_second_sample(self):
        print("\nSecond sample results")
        self.assertEqual(calculate_risk(False, True, True, False, False, False, 0, False, False, True, False, False, False, False, 0), "low")
    def test_third_sample(self):
        print("\nThird sample results")
        self.assertEqual(calculate_risk(True, False,	False,	True,	True,	True,	10,	True,	True,	False,	True,	True,	True,	True,	2), "high")
    def test_fourth_sample(self):
        print("\nFourth sample results")
        self.assertEqual(calculate_risk(False,	True,	True,	False, 	False,	True,0,	False, False, True, False, False, False, False, 1),	"low")
    def test_fifth_sample(self):
        print("\nFifth sample results")
        self.assertEqual(calculate_risk(True, False, False, False, True, False, 10, True, True, False, True, True, True, True, 2), "moderate")
    def test_sixth_sample(self):
        print("\nSixth sample results")
        self.assertEqual(calculate_risk(False, True, True, False, False, False, 0,	False, False, True, False, False, False, False, 0),	"low")
    def test_seventh_sample(self):
        print("\nSeventh sample results")
        self.assertEqual(calculate_risk(True, False, False, True, True, True, 35,	True, True ,False, True, True, True, True,	4), "high")
    def test_eighth_sample(self):
        print("\nEighth sample results")
        self.assertEqual(calculate_risk(True, False, False, False, False, False, 10, True, True, False, True, True, True, True, 1), "somewhat high")
    def test_ninth_sample(self):
        print("\nNinth sample results")
        self.assertEqual(calculate_risk(False, True, True, False, False, True, 0, False, False, True, False, False, False, False, 0), "somewhat low")
    def test_tenth_sample(self):
        print("\nTenth sample results")
        self.assertEqual(calculate_risk(True, False, False, True, True, True, 35, True, True, False, True, True, True, True, 3),	"high")
if __name__ == '__main__':
    unittest.main() #Calls the main function of T2D_Risk_Ver_6_25_25.
